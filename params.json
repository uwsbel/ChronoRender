{"name":"ChronoRender","tagline":"","body":"Chrono::Render is pipeline for high quality rendering of large multibody simulations. Chrono::Render provides a plugin to the open source Blender modeling software to use as a frontend. It also provides a web interface for the submission of rendering jobs to a server hosted by the Simulation Based Engineering Lab. The actual rendering is done with Pixar's PhotoRealistic RenderMan (PRMan) or a compatable open source renderer such as Aqsis or Pixie. Chrono::Render is free and open source software released under a BSD3 license.\r\n\r\n![Render of a foam simulation](http://sbel.wisc.edu/images/foam_glass.jpeg)\r\n\r\n\r\nDeveloped By: Daniel Kaczmarek, Aaron Bartholemew\r\n\r\n**How to Use**\r\n\r\n**Installing the Plugin and Chrono::Render**\r\n\r\n*For a more comprehinsive understanding of the plugin, read the \r\nblender-plugin-tutorial.odt file. It tells how to install the plugin, and goes \r\nthrough a in-depth tutorial of all of the features available*\r\n\r\nRequirements: blender 2.67+, python3, and pyyaml should all be installed on \r\n    the machine from which you will be running blender.\r\n\r\nThe Easy Way (for those with access to euler):\r\n    \r\nNote: this is written assuming you will run blender on a local machine\r\nand then render on euler.\r\n\r\n1. Clone the Chrono::Render repo by running \r\n    git clone https://github.com/uwsbel/ChronoRender\r\n\r\n    from somewhere on euler.\r\n\r\nThis contains all the files needed to take the exported data from blender \r\nand create a nice render from it.\r\n\r\n2. Copy the file plugin.py from euler to your local machine's blender\r\n    addons folder by using the following command (execute on local machine)\r\n\r\n    scp username@euler.msvc.wisc.edu:/path/to/blender-plugin/plugins/blender/plugin.py\r\n    /path/to/blender/addons/folder/on/your/machine/chronorender_plugin.py\r\n\r\n    On linux blender addons go in:\r\n    /home/$user/.config/blender/$version/scripts/addons\r\n    Windows XP:\r\n    C:\\Documents and Settings\\%username%\\Application Data\\Blender Foundation\\Blender\\2.6x\\scripts\\addons\r\n    Windows7:\r\n    C:\\Users\\%username%\\AppData\\Roaming\\Blender Foundation\\Blender\\2.6x\\scripts\\addons\r\n\r\n3. Open up blender.\r\n    Click on File->User Preferences->Addons \r\n    Then scroll down until you see \"Import-Export: Chrono::Render plugin\"\r\n    Click the check box on the right side\r\n    Click \"Save User Settings\" at the bottom of the page\r\n    Congratulations, the plugin is now installed and ready for use\r\n\r\n**Basic Use of the Blender Plugin**\r\nThe first thing to do is import a data file. To do this, click \r\nFile->Import->Imports a Chrono render file\r\n\r\nThen select the file you wish to import data from and click Import ChronoRender\r\n\r\n(If the default cube is still there, select it, press \"x\", and click \"Delete\")\r\n\r\nOne of the things you can now do is add color to an object. To do so, select \r\n    the object and select the material menu on the right hand side. (Symbol is\r\n    a sphere with two dark spots. About 1/3rd down the screen with a bunch of\r\n    other symbols)\r\n\r\nUnder \"Diffuse\" there will be a colored bar. Click on it and select your color\r\n    using the color wheel. You can do this for all objects.\r\n\r\nIn addition to colors, you can select the camera's position, rotation, and focal length\r\n    inside blender. You can move and rotate the camera as normal and press f12\r\n    to get a rough idea of what you will see when you render with renderman.\r\n    \r\nWhen done, click file->export->Exports chron render file and select where to\r\n    export it to and name the file out.yaml\r\n \r\nYou will now have two files, out.tar.gz and data.tar.gz. In order to run your render on the cluster simply\r\nrun\r\n\r\n    /path/to/chrono/render/scripts/crender_auto.py -r prman -o /path/to/out.tar.gz -d /path/to/data.tar.gz\r\n    \r\nParameters for this script can be gotten with --help or -h\r\n\r\nThis will extract and begin your render. Upon completion your images will be located in out/RENDERMAN/job/images\r\n \r\nIf you wish to re-render you can either delete the created directory and run the script again or follow the instructions\r\nbelow (more complicated and should be avoided).\r\n\r\n*Instructions for rendering AFTER files have all been propperly extracted follow:*\r\n\r\ngo into the RENDERMAN directory and run:\r\n    /path/to/blender-plugin/scripts/crender.py update\r\n    /path/to/blender-plugin/scripts/crender.py render -m yourfile.yaml -r aqsis\r\n\r\nIt will then render your file and place an out.0.tif file in the /job/images folder\r\n\r\nIf you wish to render multiple frames or make a video, you will need to copy \r\n    all of the data files and use the \"-f startframe endframe\" flag.\r\n\r\n    /path/to/blender-plugin/scripts/crender.py render -m yourfile.yaml -r aqsis -f 0 99\r\n\r\n    will render 100 frames. To make these frames into a movie, just use the \r\n    cmovie.py script.\r\n\r\n    /path/to/blender-plugin/scripts/cmovie.py a/lot/of/junk/RENDERMAN/job/images/out.00.tif movie.mp4\r\n\r\n    and all your images will be turned into a video.\r\n\r\n**Submitting to the cluster for rendering**\r\nThe procedure for submitting a job to the cluster for rendering is almost exactly\r\nthe same as for rendering locally. Compare:\r\n\r\n    For a local render:\r\n        /path/to/crender.py render -m yourfile.yaml -r aqsis -f 0 99\r\n\r\n    For a distributed render:\r\n        /path/to/crender.py submit -m yourfile.yaml -r aqsis -f 0 99\r\n    \r\n    Of course, there are more options for # nodes etc. To see these, just\r\n    call crender.py submit -h.\r\n\r\n    A possibly out of date list:\r\n\r\n    optional arguments:\r\n      -h, --help            show this help message and exit\r\n      -m METADATA, --metadata METADATA\r\n                            the data file that contains the render job info\r\n      -r RENDERER, --renderer RENDERER\r\n                            which renderer to use, dumps to stdout by default\r\n      -f FRAMERANGE FRAMERANGE, --framerange FRAMERANGE FRAMERANGE\r\n                            render the specified framerange; by default renders\r\n                            frame 0\r\n      -c NAME, --name NAME  the name of the job you are submitting. What it is\r\n                            (c)alled\r\n      -n NODES, --nodes NODES\r\n                            the number of nodes\r\n      -p PPN, --ppn PPN     the number of cores per node\r\n      -w WALLTIME, --walltime WALLTIME\r\n                            limit on how long the job can run HH:MM:SS\r\n      -q QUEUE, --queue QUEUE\r\n                            which queue to submit the job to\r\n\r\n    Note: \r\n        When using aqsis as the renderer, it will automatically submit a seperate\r\n        job for each node. Do NOT bother giving aqsis renders multiple nodes or\r\n        ppn as it is unable to use them.\r\n        \r\n**Lighting**\r\nThe most basic way to light a scene is to use the \"Ambient Light Proxy\" object.\r\n    This object allows you to set the intensity of the ambient light by going \r\n    to the materials tab (the little checkered sphere mid way down the right \r\n    sidebar) and adjusting the \"Ambient\" parameter. In order to adjust the \r\n    color, you must go to the World tab (a blueish circle to the left of the \r\n    materials tab) and adjust the \"Ambient Color\" parameter. \r\n\r\n    Note: the effects of the intensity that you specified will NOT be visible\r\n    in blender as blender uses individual intensities for each object. This\r\n    does not happen in renderman, so a proxy object is required to set the \r\n    intensity.\r\n\r\nThe other way to light a scene is to use blender's built in lights. In the\r\n    default scene there is already one point light. To edit the parameters\r\n    for this light, go to the little tab that has a little x with a dot in the \r\n    center. This is the lighting tab. Here you may change the type of light\r\n    (note that only point, sun, and spot are allowed for renderman), the color,\r\n    and the energy (a max of 1 for sun should be used). Finally, if using the \r\n    \"spot\" light, the angle of the beam can be adjusted using the \"Size\"\r\n    parameter under \"Spot Shape\".\r\n\r\nOther things to be aware of:\r\n    Once you start adding shaders, you WILL need to adjust the intensities and\r\n        colors of your lights.\r\n    Turning off the shadows in blender turns off the shadows in renderman. They\r\n        are ON by default so make sure you want it that way!\r\n    Do NOT delete objects you have imported! The export will fail if you do. If\r\n        you want to see around them, you can toggle them invisible by cliking\r\n        on the little eye next to the object you wish to turn invisible (upper\r\n        right by default). The little camera will toggle it invisible for \r\n        rendering. \r\n\r\n**File Format**\r\nSee FileFormat.txt\r\n\r\n**What you can do**\r\n-Apply colors to your objects and have those colors show when you render.\r\n-Position the camera and lighting\r\n-Move the camera using keyframing\r\n-A variety of lighting effects, including shadows, ambient occlusion, and \r\n    color bleeding\r\n-Selectively choose which objects to render\r\n\r\n**What this plugin does NOT do (currently)**\r\n\r\n-allow you to move, rotate, or size the objects. You can do this in blender but if\r\n    you render with renderman your changes will NOT be applied. (Camera \r\n    location however, WILL be changed if you move it. ctrl-alt-0 is nice for \r\n    snapping the camera to your view point)\r\n    \r\n-allow you to save your changes partway through. You must import the file,\r\n    apply materials and colors, and export it in ONE blender session.\r\n    \r\n-a full render with blender's \"render\" button.\r\n\r\n![Render of a dragon on a reflective surface](http://sbel.wisc.edu/images/dragon_glass.png)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}